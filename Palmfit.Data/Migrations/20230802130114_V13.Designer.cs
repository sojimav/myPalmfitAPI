// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Palmfit.Data.AppDbContext;

#nullable disable

namespace Palmfit.Data.Migrations
{
    [DbContext(typeof(PalmfitDbContext))]
    [Migration("20230802130114_V13")]
    partial class V13
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Palmfit.Data.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InviteCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLockedOut")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastOnline")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ReferralCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Palmfit.Data.Entities.BaseEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BaseEntity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Palmfit.Data.Entities.Food", b =>
                {
                    b.HasBaseType("Palmfit.Data.Entities.BaseEntity");

                    b.Property<decimal>("Calorie")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("FoodClassId");

                    b.HasDiscriminator().HasValue("Food");
                });

            modelBuilder.Entity("Palmfit.Data.Entities.FoodClass", b =>
                {
                    b.HasBaseType("Palmfit.Data.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("Description")
                                .HasColumnName("FoodClass_Description");

                            t.Property("Details")
                                .HasColumnName("FoodClass_Details");

                            t.Property("Name")
                                .HasColumnName("FoodClass_Name");
                        });

                    b.HasDiscriminator().HasValue("FoodClass");
                });

            modelBuilder.Entity("Palmfit.Data.Entities.Health", b =>
                {
                    b.HasBaseType("Palmfit.Data.Entities.BaseEntity");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Balance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BloodGroup")
                        .HasColumnType("int");

                    b.Property<int>("GenoType")
                        .HasColumnType("int");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<int>("HeightUnit")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.Property<int>("WeightUnit")
                        .HasColumnType("int");

                    b.HasIndex("AppUserId")
                        .IsUnique()
                        .HasFilter("[AppUserId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Health");
                });

            modelBuilder.Entity("Palmfit.Data.Entities.Invite", b =>
                {
                    b.HasBaseType("Palmfit.Data.Entities.BaseEntity");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AppUserId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("AppUserId")
                                .HasColumnName("Invite_AppUserId");

                            t.Property("Name")
                                .HasColumnName("Invite_Name");
                        });

                    b.HasDiscriminator().HasValue("Invite");
                });

            modelBuilder.Entity("Palmfit.Data.Entities.Meal", b =>
                {
                    b.HasBaseType("Palmfit.Data.Entities.BaseEntity");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DayOfTheWeek")
                        .HasColumnType("int");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MealOfDay")
                        .HasColumnType("int");

                    b.HasIndex("AppUserId");

                    b.HasIndex("FoodId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("AppUserId")
                                .HasColumnName("Meal_AppUserId");
                        });

                    b.HasDiscriminator().HasValue("Meal");
                });

            modelBuilder.Entity("Palmfit.Data.Entities.Notification", b =>
                {
                    b.HasBaseType("Palmfit.Data.Entities.BaseEntity");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AppUserId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("AppUserId")
                                .HasColumnName("Notification_AppUserId");

                            t.Property("Date")
                                .HasColumnName("Notification_Date");
                        });

                    b.HasDiscriminator().HasValue("Notification");
                });

            modelBuilder.Entity("Palmfit.Data.Entities.Review", b =>
                {
                    b.HasBaseType("Palmfit.Data.Entities.BaseEntity");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Verdict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AppUserId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("AppUserId")
                                .HasColumnName("Review_AppUserId");

                            t.Property("Date")
                                .HasColumnName("Review_Date");
                        });

                    b.HasDiscriminator().HasValue("Review");
                });

            modelBuilder.Entity("Palmfit.Data.Entities.Setting", b =>
                {
                    b.HasBaseType("Palmfit.Data.Entities.BaseEntity");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("AppUserId")
                        .IsUnique()
                        .HasFilter("[AppUserId] IS NOT NULL");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("AppUserId")
                                .HasColumnName("Setting_AppUserId");
                        });

                    b.HasDiscriminator().HasValue("Setting");
                });

            modelBuilder.Entity("Palmfit.Data.Entities.Subscription", b =>
                {
                    b.HasBaseType("Palmfit.Data.Entities.BaseEntity");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasIndex("AppUserId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("AppUserId")
                                .HasColumnName("Subscription_AppUserId");
                        });

                    b.HasDiscriminator().HasValue("Subscription");
                });

            modelBuilder.Entity("Palmfit.Data.Entities.Transaction", b =>
                {
                    b.HasBaseType("Palmfit.Data.Entities.BaseEntity");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Channel")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Vendor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AppUserId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("AppUserId")
                                .HasColumnName("Transaction_AppUserId");

                            t.Property("Date")
                                .HasColumnName("Transaction_Date");

                            t.Property("Description")
                                .HasColumnName("Transaction_Description");

                            t.Property("Reference")
                                .HasColumnName("Transaction_Reference");

                            t.Property("Type")
                                .HasColumnName("Transaction_Type");
                        });

                    b.HasDiscriminator().HasValue("Transaction");
                });

            modelBuilder.Entity("Palmfit.Data.Entities.Wallet", b =>
                {
                    b.HasBaseType("Palmfit.Data.Entities.BaseEntity");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("AppUserId")
                        .IsUnique()
                        .HasFilter("[AppUserId] IS NOT NULL");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("AppUserId")
                                .HasColumnName("Wallet_AppUserId");
                        });

                    b.HasDiscriminator().HasValue("Wallet");
                });

            modelBuilder.Entity("Palmfit.Data.Entities.WalletHistory", b =>
                {
                    b.HasBaseType("Palmfit.Data.Entities.BaseEntity");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealthId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("WalletAppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WalletId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("HealthId");

                    b.HasIndex("WalletId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("Amount")
                                .HasColumnName("WalletHistory_Amount");

                            t.Property("Date")
                                .HasColumnName("WalletHistory_Date");

                            t.Property("Details")
                                .HasColumnName("WalletHistory_Details");

                            t.Property("Reference")
                                .HasColumnName("WalletHistory_Reference");

                            t.Property("Type")
                                .HasColumnName("WalletHistory_Type");
                        });

                    b.HasDiscriminator().HasValue("WalletHistory");
                });

            modelBuilder.Entity("Palmfit.Data.Entities.Food", b =>
                {
                    b.HasOne("Palmfit.Data.Entities.FoodClass", "FoodClass")
                        .WithMany("Foods")
                        .HasForeignKey("FoodClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FoodClass");
                });

            modelBuilder.Entity("Palmfit.Data.Entities.Health", b =>
                {
                    b.HasOne("Palmfit.Data.Entities.AppUser", "AppUser")
                        .WithOne("Health")
                        .HasForeignKey("Palmfit.Data.Entities.Health", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Palmfit.Data.Entities.Invite", b =>
                {
                    b.HasOne("Palmfit.Data.Entities.AppUser", "AppUser")
                        .WithMany("Invities")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Palmfit.Data.Entities.Meal", b =>
                {
                    b.HasOne("Palmfit.Data.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Palmfit.Data.Entities.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("Palmfit.Data.Entities.Notification", b =>
                {
                    b.HasOne("Palmfit.Data.Entities.AppUser", "AppUser")
                        .WithMany("Notifications")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Palmfit.Data.Entities.Review", b =>
                {
                    b.HasOne("Palmfit.Data.Entities.AppUser", "AppUser")
                        .WithMany("Reviews")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Palmfit.Data.Entities.Setting", b =>
                {
                    b.HasOne("Palmfit.Data.Entities.AppUser", "AppUser")
                        .WithOne("Setting")
                        .HasForeignKey("Palmfit.Data.Entities.Setting", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Palmfit.Data.Entities.Subscription", b =>
                {
                    b.HasOne("Palmfit.Data.Entities.AppUser", "AppUser")
                        .WithMany("Subscriptions")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Palmfit.Data.Entities.Transaction", b =>
                {
                    b.HasOne("Palmfit.Data.Entities.AppUser", "AppUser")
                        .WithMany("Transactions")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Palmfit.Data.Entities.Wallet", b =>
                {
                    b.HasOne("Palmfit.Data.Entities.AppUser", "AppUser")
                        .WithOne("Wallet")
                        .HasForeignKey("Palmfit.Data.Entities.Wallet", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Palmfit.Data.Entities.WalletHistory", b =>
                {
                    b.HasOne("Palmfit.Data.Entities.Health", null)
                        .WithMany("Histories")
                        .HasForeignKey("HealthId");

                    b.HasOne("Palmfit.Data.Entities.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Palmfit.Data.Entities.AppUser", b =>
                {
                    b.Navigation("Health")
                        .IsRequired();

                    b.Navigation("Invities");

                    b.Navigation("Notifications");

                    b.Navigation("Reviews");

                    b.Navigation("Setting")
                        .IsRequired();

                    b.Navigation("Subscriptions");

                    b.Navigation("Transactions");

                    b.Navigation("Wallet")
                        .IsRequired();
                });

            modelBuilder.Entity("Palmfit.Data.Entities.FoodClass", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("Palmfit.Data.Entities.Health", b =>
                {
                    b.Navigation("Histories");
                });
#pragma warning restore 612, 618
        }
    }
}
